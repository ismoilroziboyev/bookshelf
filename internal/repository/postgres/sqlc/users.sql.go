// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: users.sql

package sqlc

import (
	"context"
)

const createNewUser = `-- name: CreateNewUser :one
INSERT INTO users (
    name,
    email,
    key,
    secret
) VALUES (
    $1,$2,$3,$4
) RETURNING id, name, email, key, secret, created_at, updated_at
`

type CreateNewUserParams struct {
	Name   string `json:"name"`
	Email  string `json:"email"`
	Key    string `json:"key"`
	Secret string `json:"secret"`
}

func (q *Queries) CreateNewUser(ctx context.Context, arg CreateNewUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createNewUser,
		arg.Name,
		arg.Email,
		arg.Key,
		arg.Secret,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Key,
		&i.Secret,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByKey = `-- name: GetUserByKey :one
SELECT id, name, email, key, secret, created_at, updated_at FROM users WHERE key=$1
`

func (q *Queries) GetUserByKey(ctx context.Context, key string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByKey, key)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Key,
		&i.Secret,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
